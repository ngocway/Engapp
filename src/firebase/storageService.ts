import { storage } from './config';
import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';

export interface UploadResult {
  success: boolean;
  url?: string;
  error?: string;
}

export class StorageService {
  /**
   * Upload file l√™n Firebase Storage
   * @param file File c·∫ßn upload
   * @param path ƒê∆∞·ªùng d·∫´n trong storage (v√≠ d·ª•: 'vocab/images/', 'vocab/audio/')
   * @param filename T√™n file (n·∫øu kh√¥ng c√≥ s·∫Ω d√πng t√™n file g·ªëc)
   * @returns Promise<UploadResult>
   */
  static async uploadFile(
    file: File, 
    path: string, 
    filename?: string
  ): Promise<UploadResult> {
    try {
      // T·∫°o t√™n file unique v·ªõi timestamp
      const timestamp = Date.now();
      const fileExtension = file.name.split('.').pop();
      const finalFilename = filename || `${timestamp}_${file.name}`;
      const fullPath = `${path}${finalFilename}`;

      // T·∫°o reference ƒë·∫øn storage
      const storageRef = ref(storage, fullPath);

      // Upload file
      const snapshot = await uploadBytes(storageRef, file);
      
      // L·∫•y download URL
      const downloadURL = await getDownloadURL(snapshot.ref);

      console.log(`‚úÖ File uploaded successfully: ${fullPath}`);
      console.log(`üîó Download URL: ${downloadURL}`);

      return {
        success: true,
        url: downloadURL
      };
    } catch (error) {
      console.error('‚ùå Error uploading file:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * Upload ·∫£nh t·ª´ v·ª±ng
   */
  static async uploadVocabImage(file: File, vocabTerm: string): Promise<UploadResult> {
    const sanitizedTerm = vocabTerm.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    const filename = `${sanitizedTerm}_${Date.now()}.${file.name.split('.').pop()}`;
    
    return this.uploadFile(file, 'vocab/images/', filename);
  }

  /**
   * Upload audio t·ª´ v·ª±ng
   */
  static async uploadVocabAudio(file: File, vocabTerm: string): Promise<UploadResult> {
    const sanitizedTerm = vocabTerm.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    const filename = `${sanitizedTerm}_${Date.now()}.${file.name.split('.').pop()}`;
    
    return this.uploadFile(file, 'vocab/audio/', filename);
  }

  /**
   * X√≥a file t·ª´ Firebase Storage
   * @param url Download URL c·ªßa file c·∫ßn x√≥a
   */
  static async deleteFile(url: string): Promise<boolean> {
    try {
      // T·∫°o reference t·ª´ URL
      const storageRef = ref(storage, url);
      
      // X√≥a file
      await deleteObject(storageRef);
      
      console.log(`‚úÖ File deleted successfully: ${url}`);
      return true;
    } catch (error) {
      console.error('‚ùå Error deleting file:', error);
      return false;
    }
  }

  /**
   * Validate file type v√† size
   */
  static validateImageFile(file: File): { valid: boolean; error?: string } {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (!allowedTypes.includes(file.type)) {
      return {
        valid: false,
        error: 'Ch·ªâ h·ªó tr·ª£ file ·∫£nh: JPG, PNG, GIF, WEBP'
      };
    }

    if (file.size > maxSize) {
      return {
        valid: false,
        error: 'K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB'
      };
    }

    return { valid: true };
  }

  static validateAudioFile(file: File): { valid: boolean; error?: string } {
    const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3', 'audio/m4a'];
    const maxSize = 10 * 1024 * 1024; // 10MB

    if (!allowedTypes.includes(file.type)) {
      return {
        valid: false,
        error: 'Ch·ªâ h·ªó tr·ª£ file audio: MP3, WAV, OGG, M4A'
      };
    }

    if (file.size > maxSize) {
      return {
        valid: false,
        error: 'K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB'
      };
    }

    return { valid: true };
  }
}

export default StorageService;
